// D√©claration d'une variable globale qui stockera toutes les donn√©es de l'application (produits, utilisateurs, utilisateur actuel)
window.appData = null;
// D√©claration d'une variable qui contiendra l'instance du modal Bootstrap pour les produits
let productModal, userModal;



// =================== Ajout d'un √©couteur d'√©v√©nements sur tout le document pour d√©tecter les saisies (input events) ======================= //

// On attache un "√©couteur d'√©v√©nement" au document entier.
// Ici, on √©coute l'√©v√©nement "input", qui se d√©clenche d√®s que l'utilisateur saisit quelque chose
// (par ex. dans un champ texte <input>).
document.addEventListener("input", function(e) {

  // V√©rifie si l'√©l√©ment qui a d√©clench√© l'√©v√©nement est bien le champ de recherche
  // On compare son attribut id avec "searchInput".
  if (e.target.id === "searchInput") {

    // On r√©cup√®re ce que l'utilisateur a tap√© dans le champ de recherche.
    // e.target.value ‚Üí le contenu du champ saisi.
    // .toLowerCase() ‚Üí convertit le texte en minuscules pour √©viter les probl√®mes
    // entre majuscules/minuscules (ex: "Chaise" == "chaise").
    const term = e.target.value.toLowerCase();

    // On s√©lectionne toutes les lignes (<tr>) du tableau des produits.
    // "#productsTable tr" ‚Üí signifie : "toutes les lignes dans l‚Äô√©l√©ment ayant l‚Äôid productsTable".
    const rows = document.querySelectorAll("#productsTable tr");

    // On parcourt chaque ligne trouv√©e dans le tableau.
    rows.forEach(row => {

      // On r√©cup√®re le contenu de la 2√®me cellule de la ligne (index [1]) ‚Üí qui correspond au "Nom du produit".
      // ?.textContent : le point d‚Äôinterrogation √©vite une erreur si la cellule n‚Äôexiste pas.
      // toLowerCase() : on convertit en minuscules pour comparer correctement.
      const name = row.cells[1]?.textContent.toLowerCase();

      // On r√©cup√®re le contenu de la 3√®me cellule de la ligne (index [2]) ‚Üí qui correspond √† la "Quantit√©".
      const qty = row.cells[2]?.textContent.toLowerCase();

      // V√©rifie si ce que l‚Äôutilisateur a tap√© (term) se trouve dans le nom OU dans la quantit√©.
      if (name.includes(term) || qty.includes(term)) {
        // ‚úÖ Si le mot recherch√© est trouv√© ‚Üí on garde la ligne visible.
        row.style.display = "";
      } else {
        // ‚ùå Si le mot recherch√© n‚Äôest pas trouv√© ‚Üí on cache la ligne en modifiant son style CSS.
        row.style.display = "none";
      }
    });
  }
});

// =================== Fin de l'√©couteur d'√©v√©nements sur les saisies ======================= //





// ===================== Fonction qui sauvegarde les donn√©es de l'application dans le localStorage du navigateur ===================== //

// D√©claration d'une fonction appel√©e "saveAppData".
// Une fonction regroupe du code qu'on peut r√©utiliser √† plusieurs endroits du programme.
function saveAppData() {

  // Ici, on enregistre les donn√©es de l'application (window.appData) dans le "localStorage".
  // localStorage : c‚Äôest une m√©moire interne au navigateur qui garde des informations m√™me si on ferme la page ou l'ordinateur.
  // JSON.stringify(window.appData) : transforme l'objet JavaScript "appData" en texte au format JSON,
  // car localStorage ne peut stocker que des cha√Ænes de caract√®res.
  // "appData" : c‚Äôest la cl√© utilis√©e pour retrouver ces donn√©es plus tard.
  localStorage.setItem("appData", JSON.stringify(window.appData));

  // Cette ligne affiche un message dans la console du navigateur pour dire :
  // "Donn√©es sauvegard√©es :" suivi du contenu de window.appData.
  // Cela aide le d√©veloppeur √† v√©rifier que la sauvegarde a bien √©t√© faite.
  console.log("Donn√©es sauvegard√©es :", window.appData);
}

// ===================== Fin de la fonction qui sauvegarde les donn√©es dans le localStorage ===================== //




// ================== Fonction qui charge les donn√©es de l'application depuis le localStorage ================== //

// D√©claration d'une fonction appel√©e "loadAppData".
// Son r√¥le est de r√©cup√©rer les donn√©es qui ont √©t√© sauvegard√©es dans le navigateur (via saveAppData).
function loadAppData() {

  // On r√©cup√®re du localStorage la valeur associ√©e √† la cl√© "appData".
  // Cela correspond aux donn√©es sauvegard√©es pr√©c√©demment (par exemple produits et utilisateurs).
  // Si rien n‚Äôa √©t√© sauvegard√©, cette valeur sera "null".
  const d = localStorage.getItem("appData");

  // On v√©rifie si on a bien trouv√© des donn√©es dans le localStorage.
  if (d) {
    // On utilise un bloc "try...catch" : c‚Äôest une structure pour tester du code qui pourrait g√©n√©rer une erreur
    // et r√©agir si une erreur survient (au lieu de faire planter tout le programme).
    try {
      // On convertit (parse) la cha√Æne JSON r√©cup√©r√©e en v√©ritable objet JavaScript.
      // Exemple : un texte comme '{"name":"Produit A"}' devient un objet {name: "Produit A"}.
      window.appData = JSON.parse(d);

      // On v√©rifie que dans l'objet charg√©, il existe bien un tableau "users".
      // Cela garantit que les donn√©es ne sont pas corrompues ou incompl√®tes.
      if (!window.appData.users || !Array.isArray(window.appData.users)) {
        // Si les donn√©es sont incorrectes, on informe le d√©veloppeur via un message dans la console.
        console.log("Donn√©es corrompues, r√©initialisation");
        // On lance une erreur volontairement pour passer directement dans le bloc "catch".
        throw new Error("Invalid data");
      }

    } catch (e) {
      // Si une erreur est survenue (par exemple JSON mal form√© ou probl√®me d'acc√®s aux donn√©es),
      // on affiche un message dans la console pour pr√©venir.
      console.log("Erreur de parsing, r√©initialisation");
      // On force la variable window.appData √† null pour signaler qu‚Äôil faudra recr√©er des donn√©es propres.
      window.appData = null;
    }
  }

  // Si on n‚Äôa trouv√© aucune donn√©e OU si les donn√©es √©taient invalides :
  if (!window.appData) {
    // On signale dans la console que l‚Äôon va cr√©er des donn√©es par d√©faut.
    console.log("Cr√©ation des donn√©es initiales");

    // On d√©finit un nouvel objet window.appData avec des valeurs de base.
    window.appData = {
      // Un tableau vide pour les produits (rien n‚Äôest encore enregistr√©).
      products: [],

      // Un tableau d‚Äôutilisateurs par d√©faut pour tester l‚Äôapplication :
      // 1 administrateur (admin) et 1 utilisateur standard (user).
      users: [
        {username: "admin", password: "admin123", role: "admin", status: "Actif"},
        {username: "user", password: "user123", role: "user", status: "Actif"}
      ],

      // Au d√©marrage, aucun utilisateur n‚Äôest connect√© (on attend une connexion via le formulaire).
      currentUser: null
    };

    // On sauvegarde imm√©diatement ces nouvelles donn√©es dans le localStorage
    // afin qu‚Äôelles soient disponibles lors du prochain chargement de la page.
    saveAppData();
  }

  // On affiche dans la console l‚Äô√©tat final de window.appData
  // pour v√©rifier quelles donn√©es ont √©t√© effectivement charg√©es.
  console.log("Donn√©es charg√©es:", window.appData);
}

// ================== Fin de la fonction loadAppData ================== //





/*************************************************************
 * üü¢ Mise en route de l‚Äôapplication apr√®s le chargement de la page
 * ‚Üí Ce code s‚Äôex√©cute automatiquement une fois que toute la page HTML est pr√™te.
 * ‚Üí Son r√¥le est d‚Äôactiver toutes les fonctionnalit√©s de l‚Äôapplication :
 *    - Charger les donn√©es sauvegard√©es
 *    - Pr√©parer les fen√™tres modales (produits et utilisateurs)
 *    - Activer les boutons (connexion, ajout produit, export, etc.)
 *    - G√©rer la connexion/d√©connexion des utilisateurs
 *************************************************************/

// On dit au navigateur : "Ex√©cute ce code uniquement quand la page est compl√®tement charg√©e"
document.addEventListener("DOMContentLoaded", function() {

  // Affiche un message dans la console pour v√©rifier que la page est bien charg√©e
  console.log("Page charg√©e");

  // Appelle une fonction qui recharge les donn√©es sauvegard√©es (produits, utilisateurs, etc.)
  loadAppData();

  // Affiche dans la console ce qui a √©t√© charg√© (utile pour v√©rifier si tout va bien)
  console.log("Donn√©es apr√®s chargement:", window.appData);

  // Pr√©pare une "fen√™tre modale" Bootstrap pour les produits (fen√™tre popup qui s‚Äôouvre quand on clique)
  productModal = new bootstrap.Modal(document.getElementById("productModal"));

  // Pr√©pare aussi une "fen√™tre modale" Bootstrap pour les utilisateurs
  userModal = new bootstrap.Modal(document.getElementById("userModal"));

  // =====================================
  // Fonctionnalit√© : masquer/d√©masquer le mot de passe
  // =====================================

  // On r√©cup√®re le bouton/zone cliquable qui permet d‚Äôafficher ou masquer le mot de passe
  const togglePassword = document.getElementById("togglePassword");

  // On r√©cup√®re le champ de saisie du mot de passe
  const passwordField = document.getElementById("password");

  // On r√©cup√®re l‚Äôic√¥ne (≈ìil ou ≈ìil barr√©) pour l‚Äôafficher correctement
  const togglePasswordIcon = document.getElementById("togglePasswordIcon");

  // On dit : "Quand on clique sur l‚Äôic√¥ne/zone togglePassword"
  togglePassword.addEventListener("click", function() {

    // On v√©rifie si le champ est actuellement "password" (texte cach√©)
    // Si oui ‚Üí on le change en "text" (texte visible)
    // Sinon ‚Üí on le remet en "password"
    const type = passwordField.getAttribute("type") === "password" ? "text" : "password";

    // On applique le nouveau type (password ou text) au champ du mot de passe
    passwordField.setAttribute("type", type);

    // On change l‚Äôic√¥ne en fonction du mode choisi
    if (type === "password") {
      // Si c‚Äôest masqu√© ‚Üí on affiche l‚Äô≈ìil normal
      togglePasswordIcon.classList.remove("fa-eye-slash");
      togglePasswordIcon.classList.add("fa-eye");
    } else {
      // Si c‚Äôest visible ‚Üí on affiche l‚Äô≈ìil barr√©
      togglePasswordIcon.classList.remove("fa-eye");
      togglePasswordIcon.classList.add("fa-eye-slash");
    }
  });

  // =====================================
  // V√©rification de l‚Äôutilisateur d√©j√† connect√©
  // =====================================

  // On v√©rifie si un utilisateur est d√©j√† connect√© (donn√©es sauvegard√©es dans appData)
  if (window.appData.currentUser) {
    console.log("Utilisateur d√©j√† connect√©:", window.appData.currentUser);

    // Si oui ‚Üí on affiche directement l‚Äôapplication principale
    showMainApp();
  } else {
    console.log("Aucun utilisateur connect√©");

    // Sinon ‚Üí on reste sur la page de connexion
    showLoginPage();
  }

  // =====================================
  // Gestion des √©v√©nements (connexion, boutons, formulaires‚Ä¶)
  // =====================================

  // Quand on clique sur "Se connecter", on emp√™che l‚Äôenvoi normal du formulaire
  // et on appelle notre fonction handleLogin pour v√©rifier les identifiants
  document.getElementById("loginForm").addEventListener("submit", function(e) {
    console.log("Form submit intercept√©");
    handleLogin(e);
  });

  // Quand on clique sur "D√©connexion" ‚Üí on appelle handleLogout
  document.getElementById("logoutBtn").addEventListener("click", handleLogout);

  // Quand on clique sur "Ajouter produit" ‚Üí on vide le formulaire et on ouvre la fen√™tre modale
  document.getElementById("addProductBtn").addEventListener("click", function() {
    document.getElementById("productForm").reset(); // on r√©initialise le formulaire
    document.getElementById("productId").value = ""; // on vide l‚ÄôID (nouveau produit)
    productModal.show(); // on ouvre la fen√™tre popup
  });

  // Quand on clique sur "Enregistrer produit" ‚Üí on appelle la fonction saveProduct
  document.getElementById("saveProductBtn").addEventListener("click", saveProduct);

  // Quand on clique sur "Exporter CSV" ‚Üí on appelle la fonction exportToCSV
  document.getElementById("exportBtn").addEventListener("click", exportToCSV);

  // Quand on clique sur "Admin" ‚Üí on appelle la fonction showAdminPage
  document.getElementById("adminBtn").addEventListener("click", showAdminPage);

  // Quand on clique sur "Retour au Dashboard" ‚Üí on appelle showDashboard
  document.getElementById("backToDashboard").addEventListener("click", showDashboard);

  // Quand on clique sur "Nouvel utilisateur" ‚Üí on vide le formulaire et on ouvre la modale
  document.getElementById("addUserBtn").addEventListener("click", function() {
    document.getElementById("userForm").reset();
    userModal.show();
  });

  // Quand on clique sur "Cr√©er utilisateur" ‚Üí on appelle saveUser
  document.getElementById("saveUserBtn").addEventListener("click", saveUser);

  // Quand on clique sur "Exporter JSON" ‚Üí on appelle exportJSON
  document.getElementById("exportJSONBtn").addEventListener("click", exportJSON);

  // Quand on clique sur "Importer JSON" ‚Üí on d√©clenche un clic cach√© sur l‚Äôinput file
  document.getElementById("importJSONBtn").addEventListener("click", function() {
    document.getElementById("importFile").click();
  });

  // Quand un fichier est choisi dans "Importer JSON" ‚Üí on appelle importJSON
  document.getElementById("importFile").addEventListener("change", importJSON);
});
/*************************************************************
 * üü¢ Mise en route de l‚Äôapplication apr√®s le chargement de la page
 * ‚Üí Ce code s‚Äôex√©cute automatiquement une fois que toute la page HTML est pr√™te.
 * ‚Üí Son r√¥le est d‚Äôactiver toutes les fonctionnalit√©s de l‚Äôapplication :
 *    - Charger les donn√©es sauvegard√©es
 *    - Pr√©parer les fen√™tres modales (produits et utilisateurs)
 *    - Activer les boutons (connexion, ajout produit, export, etc.)
 *    - G√©rer la connexion/d√©connexion des utilisateurs
 *************************************************************/






/*************************************************************
 * üü¢ Fonction de gestion de la connexion utilisateur
 * ‚Üí Cette fonction est appel√©e quand quelqu‚Äôun essaie de se connecter.
 * ‚Üí Son r√¥le est de :
 *    - Emp√™cher l‚Äôenvoi normal du formulaire (rechargement de la page)
 *    - V√©rifier si les identifiants (username + password) correspondent
 *    - Connecter l‚Äôutilisateur si tout est correct
 *    - Sinon, afficher un message d‚Äôerreur
 *************************************************************/

// D√©claration de la fonction handleLogin qui re√ßoit un "√©v√©nement" (e) en param√®tre
function handleLogin(e) {

  // Emp√™che le comportement normal du formulaire (qui est de recharger la page)
  e.preventDefault();

  // Affiche un message dans la console pour dire que la fonction a √©t√© appel√©e
  console.log("handleLogin appel√©");
  
  // R√©cup√®re la valeur saisie dans le champ "username" (identifiant)
  const u = document.getElementById("username").value;

  // R√©cup√®re la valeur saisie dans le champ "password" (mot de passe)
  const p = document.getElementById("password").value;
  
  // Affiche dans la console la tentative de connexion avec l‚Äôidentifiant et le mot de passe
  console.log("Tentative de connexion:", u, p);

  // Affiche dans la console la liste des utilisateurs disponibles (stock√©s dans appData)
  console.log("Users disponibles:", window.appData.users);
  
  // Recherche dans la liste des utilisateurs un objet qui correspond exactement :
  // - m√™me identifiant (username)
  // - m√™me mot de passe (password)
  // - ET statut √©gal √† "Actif"
  const usr = window.appData.users.find(
    x => x.username === u && x.password === p && x.status === "Actif"
  );
  
  // Affiche dans la console l‚Äôutilisateur trouv√© ou "undefined" si aucun ne correspond
  console.log("Utilisateur trouv√©:", usr);
  
  // V√©rifie si un utilisateur a bien √©t√© trouv√©
  if (usr) {
    // Si oui ‚Üí on enregistre cet utilisateur comme √©tant le "currentUser" (utilisateur actuel connect√©)
    window.appData.currentUser = {username: usr.username, role: usr.role};

    // On sauvegarde les donn√©es mises √† jour (y compris l‚Äôutilisateur connect√©)
    saveAppData();

    // On affiche dans la console que la connexion a r√©ussi pour cet utilisateur
    console.log("Connexion r√©ussie pour:", usr.username);

    // On affiche l‚Äôapplication principale (dashboard, produits, etc.)
    showMainApp();

    // On affiche une alerte visuelle "Connexion r√©ussie"
    // Param√®tres : (message, type, jouer le son ?)
    showAlert("Connexion r√©ussie", "success", true);

  } else {
    // Si aucun utilisateur valide n‚Äôa √©t√© trouv√© ‚Üí on affiche dans la console l‚Äô√©chec
    console.log("√âchec de connexion");

    // On affiche une alerte visuelle d‚Äôerreur
    showAlert("Identifiants incorrects ou utilisateur inactif", "danger", true);
  }
}
/*************************************************************
 * üü¢ Fonction de gestion de la connexion utilisateur
 * ‚Üí Cette fonction est appel√©e quand quelqu‚Äôun essaie de se connecter.
 * ‚Üí Son r√¥le est de :
 *    - Emp√™cher l‚Äôenvoi normal du formulaire (rechargement de la page)
 *    - V√©rifier si les identifiants (username + password) correspondent
 *    - Connecter l‚Äôutilisateur si tout est correct
 *    - Sinon, afficher un message d‚Äôerreur
 *************************************************************/





/*************************************************************
 * üî¥ Fonction de d√©connexion utilisateur
 * ‚Üí Cette fonction est appel√©e quand l‚Äôutilisateur clique
 *   sur le bouton "D√©connexion".
 * ‚Üí Son r√¥le est de :
 *    - Supprimer l‚Äôutilisateur actuellement connect√©
 *    - Sauvegarder cet √©tat (aucun utilisateur connect√©)
 *    - R√©initialiser le formulaire de connexion (vider login + mot de passe)
 *    - Afficher la page de connexion
 *    - Montrer un message confirmant la d√©connexion
 *************************************************************/

// D√©claration de la fonction handleLogout (aucun param√®tre car elle est appel√©e directement au clic)
function handleLogout() {

  // Supprime l‚Äôutilisateur actuellement connect√© en mettant "currentUser" √† null
  // (null = aucun utilisateur connect√©)
  window.appData.currentUser = null;

  // Sauvegarde imm√©diatement cette nouvelle donn√©e (donc : personne n‚Äôest connect√©)
  saveAppData();

  // Vide le champ "Identifiant" du formulaire de connexion
  document.getElementById("username").value = "";

  // Vide aussi le champ "Mot de passe"
  document.getElementById("password").value = "";

  // Affiche de nouveau la page de connexion (l‚Äôutilisateur est renvoy√© vers l‚Äô√©cran de login)
  showLoginPage();

  // Affiche un message visuel (alerte) confirmant la d√©connexion
  // Param√®tres : (message, type d‚Äôalerte, activer le son ?)
  showAlert("D√©connexion r√©ussie", "info", true);
}
/*************************************************************
 * üî¥ Fonction de d√©connexion utilisateur
 * ‚Üí Cette fonction est appel√©e quand l‚Äôutilisateur clique
 *   sur le bouton "D√©connexion".
 * ‚Üí Son r√¥le est de :
 *    - Supprimer l‚Äôutilisateur actuellement connect√©
 *    - Sauvegarder cet √©tat (aucun utilisateur connect√©)
 *    - R√©initialiser le formulaire de connexion (vider login + mot de passe)
 *    - Afficher la page de connexion
 *    - Montrer un message confirmant la d√©connexion
 *************************************************************/




/*************************************************************
 * üü¢ Fonction : showLoginPage
 * ‚Üí Cette fonction a pour r√¥le d‚Äôafficher la page de connexion
 *   et de masquer l‚Äôapplication principale.
 * ‚Üí En clair : elle est utilis√©e quand l‚Äôutilisateur n‚Äôest
 *   pas connect√© ou vient de se d√©connecter.
 *************************************************************/

// D√©claration de la fonction showLoginPage (aucun param√®tre n√©cessaire)
function showLoginPage() {

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "loginPage"
  // et on supprime la classe CSS "hidden".
  // ‚Üí R√©sultat : la page de connexion redevient visible.
  document.getElementById("loginPage").classList.remove("hidden");

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "mainApp"
  // et on lui ajoute la classe CSS "hidden".
  // ‚Üí R√©sultat : l‚Äôinterface principale de l‚Äôapplication est cach√©e.
  document.getElementById("mainApp").classList.add("hidden");
}
/*************************************************************
 * üü¢ Fonction : showLoginPage
 * ‚Üí Cette fonction a pour r√¥le d‚Äôafficher la page de connexion
 *   et de masquer l‚Äôapplication principale.
 * ‚Üí En clair : elle est utilis√©e quand l‚Äôutilisateur n‚Äôest
 *   pas connect√© ou vient de se d√©connecter.
 *************************************************************/




/*************************************************************
 * üü¢ Fonction : showMainApp
 * ‚Üí Cette fonction a pour r√¥le d‚Äôafficher l‚Äôinterface principale
 *   de l‚Äôapplication une fois que l‚Äôutilisateur est connect√©.
 * ‚Üí En parall√®le, elle masque la page de connexion et affiche
 *   certaines informations dynamiques (comme le nom de l‚Äôutilisateur).
 *************************************************************/

// D√©claration de la fonction showMainApp (aucun param√®tre n√©cessaire)
function showMainApp() {

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "loginPage"
  // et on ajoute la classe CSS "hidden".
  // ‚Üí R√©sultat : la page de connexion est cach√©e.
  document.getElementById("loginPage").classList.add("hidden");

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "mainApp"
  // et on supprime la classe CSS "hidden".
  // ‚Üí R√©sultat : l‚Äôapplication principale devient visible.
  document.getElementById("mainApp").classList.remove("hidden");

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "currentUser".
  // On met √† jour son contenu texte avec le nom d‚Äôutilisateur
  // actuellement connect√©, r√©cup√©r√© dans window.appData.currentUser.username.
  // ‚Üí Exemple : si l‚Äôutilisateur connect√© est "admin",
  //    le texte affich√© sera "admin".
  document.getElementById("currentUser").textContent = window.appData.currentUser.username;

  // On s√©lectionne le bouton ayant l‚ÄôID "adminBtn".
  // On modifie son style CSS (display) :
  //   - Si le r√¥le de l‚Äôutilisateur est "admin", le bouton est visible ("inline-block").
  //   - Sinon, si le r√¥le est "user", le bouton reste cach√© ("none").
  // ‚Üí Cela garantit que seul un administrateur voit ce bouton sp√©cial.
  document.getElementById("adminBtn").style.display = 
    window.appData.currentUser.role === "admin" ? "inline-block" : "none";

  // On appelle la fonction showDashboard()
  // ‚Üí Cela permet de charger et d‚Äôafficher le tableau de bord
  //   (statistiques, liste de produits, etc.) d√®s que l‚Äôutilisateur
  //   est correctement connect√©.
  showDashboard();
}
/*************************************************************
 * üü¢ Fonction : showMainApp
 * ‚Üí Cette fonction a pour r√¥le d‚Äôafficher l‚Äôinterface principale
 *   de l‚Äôapplication une fois que l‚Äôutilisateur est connect√©.
 * ‚Üí En parall√®le, elle masque la page de connexion et affiche
 *   certaines informations dynamiques (comme le nom de l‚Äôutilisateur).
 *************************************************************/




/*************************************************************
 * üü¢ Fonction : showDashboard
 * ‚Üí Cette fonction sert √† afficher le tableau de bord principal
 *   de l‚Äôapplication (les statistiques, la liste des produits, etc.)
 *   et √† masquer la page d‚Äôadministration si elle √©tait visible.
 * ‚Üí Elle met aussi √† jour les donn√©es affich√©es sur le tableau de bord.
 *************************************************************/

// D√©claration de la fonction showDashboard (aucun param√®tre n√©cessaire)
function showDashboard() {

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "dashboardPage".
  // On supprime la classe CSS "hidden".
  // ‚Üí R√©sultat : la section du tableau de bord devient visible √† l‚Äô√©cran.
  document.getElementById("dashboardPage").classList.remove("hidden");

  // On s√©lectionne l‚Äô√©l√©ment HTML ayant l‚ÄôID "adminPage".
  // On ajoute la classe CSS "hidden".
  // ‚Üí R√©sultat : la page d‚Äôadministration (gestion des utilisateurs)
  //   est cach√©e pour laisser place uniquement au tableau de bord.
  document.getElementById("adminPage").classList.add("hidden");

  // On appelle la fonction updateDashboard().
  // ‚Üí Cette fonction va recalculer et r√©afficher toutes les informations
  //   importantes du tableau de bord : 
  //      - nombre total de produits,
  //      - quantit√© totale en stock,
  //      - nombre de produits en rupture,
  //      - et la mise √† jour de la liste des produits affich√©s.
  updateDashboard();
}
/*************************************************************
 * üü¢ Fonction : showDashboard
 * ‚Üí Cette fonction sert √† afficher le tableau de bord principal
 *   de l‚Äôapplication (les statistiques, la liste des produits, etc.)
 *   et √† masquer la page d‚Äôadministration si elle √©tait visible.
 * ‚Üí Elle met aussi √† jour les donn√©es affich√©es sur le tableau de bord.
 *************************************************************/




/*************************************************************
 * üî¥ Fonction : showAdminPage
 * ‚Üí Cette fonction sert √† afficher la page d‚Äôadministration 
 *   (gestion des utilisateurs).
 * ‚Üí Elle v√©rifie d‚Äôabord si l‚Äôutilisateur connect√© est bien 
 *   un administrateur, sinon l‚Äôacc√®s est refus√©.
 *************************************************************/

// D√©claration de la fonction showAdminPage (aucun param√®tre)
function showAdminPage() {

  // V√©rifie si l‚Äôutilisateur actuellement connect√© n‚Äôest PAS un administrateur.
  // On regarde la propri√©t√© "role" de l‚Äôutilisateur courant stock√© dans window.appData.
  // Si ce r√¥le est diff√©rent de "admin" ‚Üí alors l‚Äôacc√®s doit √™tre bloqu√©.
  if (window.appData.currentUser.role !== "admin") {

    // Si ce n‚Äôest pas un admin, on appelle la fonction showAlert().
    // Cette fonction affiche un message d‚Äôalerte √† l‚Äô√©cran.
    // Ici le message est : "Acc√®s refus√© - Droits administrateur requis".
    // Le type "danger" indique une alerte rouge ‚ö†Ô∏è.
    // Le param√®tre "true" sert √† d√©clencher aussi un son d‚Äôalerte.
    showAlert("Acc√®s refus√© - Droits administrateur requis", "danger", true);

    // On arr√™te l‚Äôex√©cution de la fonction imm√©diatement avec "return".
    // R√©sultat : le reste du code n‚Äôest pas ex√©cut√© si l‚Äôutilisateur n‚Äôest pas admin.
    return;
  }

  // Si on est bien un administrateur, alors on cache le tableau de bord.
  // Pour cela, on ajoute la classe CSS "hidden" √† l‚Äô√©l√©ment ayant l‚ÄôID "dashboardPage".
  document.getElementById("dashboardPage").classList.add("hidden");

  // Ensuite, on rend visible la page d‚Äôadministration.
  // Pour cela, on enl√®ve la classe CSS "hidden" √† l‚Äô√©l√©ment ayant l‚ÄôID "adminPage".
  document.getElementById("adminPage").classList.remove("hidden");

  // Enfin, on appelle la fonction loadAdminData().
  // Cette fonction va charger et afficher la liste des utilisateurs existants
  // dans le tableau de la page d‚Äôadministration.
  loadAdminData();
}
/*************************************************************
 * üî¥ Fonction : showAdminPage
 * ‚Üí Cette fonction sert √† afficher la page d‚Äôadministration 
 *   (gestion des utilisateurs).
 * ‚Üí Elle v√©rifie d‚Äôabord si l‚Äôutilisateur connect√© est bien 
 *   un administrateur, sinon l‚Äôacc√®s est refus√©.
 *************************************************************/




/*************************************************************
 * üé® Objet categoryColors
 * ‚Üí Cet objet sert √† associer chaque cat√©gorie de produit 
 *   (√âlectronique, Alimentaire, V√™tements, etc.)
 *   √† une couleur particuli√®re en utilisant les classes Bootstrap.
 * ‚Üí Ces classes d√©finissent l'apparence visuelle (couleur, texte).
 *************************************************************/

// D√©claration d‚Äôune constante appel√©e "categoryColors"
// Une constante (const) signifie que la variable ne pourra pas √™tre r√©assign√©e,
// mais on peut toujours modifier son contenu interne si c‚Äôest un objet.
const categoryColors = {

  // Pour la cat√©gorie "√âlectronique" :
  // On associe la classe Bootstrap "bg-primary" (fond bleu).
  "√âlectronique": "bg-primary",

  // Pour la cat√©gorie "Alimentaire" :
  // On associe la classe "bg-success" (fond vert).
  "Alimentaire": "bg-success",

  // Pour la cat√©gorie "V√™tements" :
  // On associe deux classes Bootstrap : "bg-warning" (fond jaune)
  // et "text-dark" (texte en noir pour rester lisible).
  "V√™tements": "bg-warning text-dark",

  // Pour la cat√©gorie "Meubles" :
  // On associe "bg-info" (fond bleu clair) et "text-dark" (texte noir).
  "Meubles": "bg-info text-dark",

  // Pour la cat√©gorie "Autre" :
  // On associe "bg-secondary" (fond gris).
  "Autre": "bg-secondary"
};
/*************************************************************
 * üé® Objet categoryColors
 * ‚Üí Cet objet sert √† associer chaque cat√©gorie de produit 
 *   (√âlectronique, Alimentaire, V√™tements, etc.)
 *   √† une couleur particuli√®re en utilisant les classes Bootstrap.
 * ‚Üí Ces classes d√©finissent l'apparence visuelle (couleur, texte).
 *************************************************************/



/*************************************************************
 * üìä Fonction updateDashboard
 * ‚Üí Cette fonction met √† jour le tableau de bord et la liste
 *   des produits affich√©s dans l‚Äôapplication.
 * ‚Üí Elle compte les produits, les quantit√©s, d√©tecte les stocks bas
 *   et construit le tableau HTML des produits.
 *************************************************************/

// D√©claration de la fonction "updateDashboard"
function updateDashboard() {

  // On r√©cup√®re tous les produits enregistr√©s dans l'application
  // Ils sont stock√©s dans "window.appData.products"
  const prods = window.appData.products;

  // On met √† jour le nombre total de produits dans l‚Äô√©l√©ment HTML
  // dont l‚Äôid est "totalProducts"
  document.getElementById("totalProducts").textContent = prods.length;

  // On calcule la quantit√© totale de tous les produits
  // avec la m√©thode reduce (on additionne les "quantity")
  // et on affiche ce r√©sultat dans l‚Äô√©l√©ment HTML avec l‚Äôid "totalQuantity"
  document.getElementById("totalQuantity").textContent = prods.reduce((a, p) => a + p.quantity, 0);
  
  // On filtre uniquement les produits qui ont une quantit√©
  // inf√©rieure ou √©gale √† 5 (donc en stock bas).
  const lowStockProducts = prods.filter(p => p.quantity <= 5);

  // On met √† jour l‚Äô√©l√©ment HTML "lowStock" avec le nombre
  // de produits qui ont un stock faible
  document.getElementById("lowStock").textContent = lowStockProducts.length;

  // Si au moins un produit est en stock bas (lowStockProducts > 0)
  if (lowStockProducts.length > 0) {
    // On r√©cup√®re les noms et quantit√©s de ces produits
    // Exemple : "Shampooing (2)", "Ciseaux (1)"
    const productNames = lowStockProducts.map(p => `"${p.name}" (${p.quantity})`).join(", ");
    
    // On appelle la fonction showAlert pour afficher
    // une alerte ‚ö†Ô∏è group√©e listant tous les produits en stock bas
    showAlert(`‚ö†Ô∏è Stock bas d√©tect√© pour ${lowStockProducts.length} produit(s): ${productNames}`, "warning", true);
  }

  // On s√©lectionne le corps du tableau HTML (<tbody>) qui affiche les produits
  const tbody = document.getElementById("productsTable");

  // Si aucun produit n‚Äôexiste (liste vide)
  if (prods.length === 0) {
    // On affiche un message "Aucun produit" centr√©
    // colspan='7' permet de fusionner 7 colonnes
    tbody.innerHTML = "<tr><td colspan='7' class='text-center text-muted'>Aucun produit</td></tr>";
    return; // On sort de la fonction
  }

  // Sinon, on construit dynamiquement le tableau HTML avec tous les produits
  tbody.innerHTML = prods.map(p => 
    "<tr>" +
      // Colonne ID
      "<td>" + p.id + "</td>" +
      // Colonne Nom du produit
      "<td>" + p.name + "</td>" +
      // Colonne Quantit√© avec badge (rouge si <=5, vert sinon)
      "<td><span class='badge badge-stock " + (p.quantity <= 5 ? "bg-danger" : "bg-success") + "'>" + p.quantity + "</span></td>" +
      // Colonne Prix (format√© en 2 d√©cimales avec "‚Ç¨")
      "<td>" + p.price.toFixed(2) + " ‚Ç¨</td>" +
      // Colonne Cat√©gorie (couleur choisie selon categoryColors)
      "<td><span class='badge " + (categoryColors[p.category] || "bg-light text-dark") + "'>" + p.category + "</span></td>" +
      // Colonne Statut (Stock Bas ou En Stock)
      "<td><span class='badge " + (p.quantity <= 5 ? "bg-warning text-dark" : "bg-success") + "'>" + (p.quantity <= 5 ? "Stock Bas" : "En Stock") + "</span></td>" +
      // Colonne Actions (boutons Modifier et Supprimer)
      "<td>" +
        // Bouton Modifier avec ic√¥ne ‚úèÔ∏è (fa-edit)
        "<button class='btn btn-sm btn-primary me-1' onclick='editProduct(" + p.id + ")'><i class='fas fa-edit'></i></button>" +
        // Bouton Supprimer avec ic√¥ne üóëÔ∏è (fa-trash)
        "<button class='btn btn-sm btn-danger' onclick='deleteProduct(" + p.id + ")'><i class='fas fa-trash'></i></button>" +
      "</td>" +
    "</tr>"
  ).join(""); // join("") colle toutes les lignes ensemble pour remplir le tableau
}
/*************************************************************
 * üìä Fonction updateDashboard
 * ‚Üí Cette fonction met √† jour le tableau de bord et la liste
 *   des produits affich√©s dans l‚Äôapplication.
 * ‚Üí Elle compte les produits, les quantit√©s, d√©tecte les stocks bas
 *   et construit le tableau HTML des produits.
 *************************************************************/



/*************************************************************
 * üíæ Fonction saveProduct
 * ‚Üí Cette fonction enregistre un produit (ajout ou modification).
 * ‚Üí Elle lit les donn√©es saisies dans le formulaire,
 *   v√©rifie leur validit√©, et met √† jour la liste des produits.
 *************************************************************/

function saveProduct() {

  // R√©cup√®re l'ID du produit (cach√© dans le formulaire).
  // Si on modifie un produit existant, l'ID est rempli.
  // Si on ajoute un nouveau produit, l'ID est vide.
  const id = document.getElementById("productId").value;

  // R√©cup√®re le nom du produit √©crit dans le champ "Nom".
  const name = document.getElementById("productName").value;

  // R√©cup√®re la quantit√© saisie dans le champ "Quantit√©"
  // et convertit la valeur en entier avec parseInt.
  const q = parseInt(document.getElementById("productQuantity").value);

  // R√©cup√®re le prix saisi dans le champ "Prix"
  // et convertit la valeur en nombre d√©cimal avec parseFloat.
  const price = parseFloat(document.getElementById("productPrice").value);

  // R√©cup√®re la cat√©gorie s√©lectionn√©e dans le menu d√©roulant.
  const cat = document.getElementById("productCategory").value;
  
  // V√©rifie si les champs sont valides :
  // - Le nom ne doit pas √™tre vide (!name)
  // - La quantit√© doit √™tre un nombre valide (isNaN(q) = faux)
  // - Le prix doit √™tre un nombre valide (isNaN(price) = faux)
  if (!name || isNaN(q) || isNaN(price)) {
    // Si une erreur est d√©tect√©e ‚Üí affiche une alerte rouge (danger)
    showAlert("Champs invalides", "danger", true);
    return; // Stoppe la fonction sans enregistrer
  }
  
  // Si on est en mode "modification" (id existe d√©j√†)
  if (id) {
    // On cherche la position (index) du produit dans la liste
    // en comparant les ID existants avec l'ID du formulaire
    const i = window.appData.products.findIndex(p => p.id == id);

    // On remplace les anciennes donn√©es du produit par les nouvelles
    window.appData.products[i] = {
      id: parseInt(id),   // ID converti en nombre entier
      name: name,         // Nom du produit
      quantity: q,        // Quantit√©
      price: price,       // Prix
      category: cat       // Cat√©gorie
    };

  } else {
    // Sinon (si aucun ID ‚Üí nouveau produit)
    // On cr√©e un nouvel ID unique :
    // - Si la liste n‚Äôest pas vide ‚Üí prend le plus grand ID existant + 1
    // - Si la liste est vide ‚Üí commence √† 1
    const nid = window.appData.products.length
      ? Math.max(...window.appData.products.map(p => p.id)) + 1
      : 1;

    // On ajoute ce nouveau produit dans le tableau "products"
    window.appData.products.push({
      id: nid,       // Nouvel identifiant unique
      name: name,    // Nom
      quantity: q,   // Quantit√©
      price: price,  // Prix
      category: cat  // Cat√©gorie
    });
  }
  
  // Sauvegarde les donn√©es dans le stockage local du navigateur
  saveAppData();

  // Ferme la fen√™tre modale du formulaire
  productModal.hide();

  // Met √† jour le tableau de bord et la liste des produits
  updateDashboard();

  // Affiche une alerte verte (success) pour confirmer
  showAlert("Produit enregistr√©", "success", true);
}
/*************************************************************
 * üíæ Fonction saveProduct
 * ‚Üí Cette fonction enregistre un produit (ajout ou modification).
 * ‚Üí Elle lit les donn√©es saisies dans le formulaire,
 *   v√©rifie leur validit√©, et met √† jour la liste des produits.
 *************************************************************/




/*************************************************************
 * ‚úèÔ∏è Fonction editProduct
 * ‚Üí Cette fonction permet d'√©diter (modifier) un produit existant.
 * ‚Üí Elle remplit automatiquement le formulaire avec les infos
 *   du produit choisi pour que l'utilisateur puisse les changer.
 *************************************************************/

function editProduct(id) {
  
  // Recherche dans la liste des produits (window.appData.products)
  // celui dont l'ID correspond √† celui pass√© en param√®tre.
  // ‚Üí "find" parcourt le tableau et renvoie le 1er √©l√©ment qui correspond.
  const p = window.appData.products.find(p => p.id == id);

  // Remplit le champ cach√© "productId" avec l'ID du produit trouv√©.
  // Cela permet de savoir qu'on est en mode "modification" et pas en "ajout".
  document.getElementById("productId").value = p.id;

  // Remplit le champ du formulaire pour le nom du produit
  // avec la valeur existante (ex: "Shampooing").
  document.getElementById("productName").value = p.name;

  // Remplit le champ du formulaire pour la quantit√©
  // avec la valeur enregistr√©e (ex: 12).
  document.getElementById("productQuantity").value = p.quantity;

  // Remplit le champ du formulaire pour le prix
  // avec la valeur enregistr√©e (ex: 9.99).
  document.getElementById("productPrice").value = p.price;

  // Remplit le champ du formulaire pour la cat√©gorie
  // (menu d√©roulant) avec la cat√©gorie du produit (ex: "Cosm√©tiques").
  document.getElementById("productCategory").value = p.category;

  // Enfin, on affiche la fen√™tre modale (le formulaire) pour permettre
  // √† l‚Äôutilisateur de voir et modifier les informations.
  productModal.show();
}
/*************************************************************
 * ‚úèÔ∏è Fonction editProduct
 * ‚Üí Cette fonction permet d'√©diter (modifier) un produit existant.
 * ‚Üí Elle remplit automatiquement le formulaire avec les infos
 *   du produit choisi pour que l'utilisateur puisse les changer.
 *************************************************************/




/*************************************************************
 * üóëÔ∏è Fonction deleteProduct
 * ‚Üí Cette fonction permet de supprimer un produit de la liste.
 * ‚Üí Elle demande d‚Äôabord une confirmation √† l‚Äôutilisateur avant
 *   d‚Äôeffacer d√©finitivement le produit choisi.
 *************************************************************/

function deleteProduct(id) {
  
  // On cherche dans la liste des produits (window.appData.products)
  // le produit qui a l'ID correspondant √† celui pass√© en param√®tre.
  // ‚Üí "find" retourne l'objet produit (par ex: {id:2, name:"Gel coiffant", ...}).
  const product = window.appData.products.find(p => p.id == id);

  // On demande √† l'utilisateur une confirmation avant la suppression.
  // La fonction "confirm" affiche une bo√Æte avec "OK" et "Annuler".
  // ‚Üí Si l‚Äôutilisateur clique sur "OK", confirmDelete = true.
  // ‚Üí Si l‚Äôutilisateur clique sur "Annuler", confirmDelete = false.
  const confirmDelete = confirm(`Voulez-vous vraiment supprimer le produit "${product.name}" ?`);

  // Si l‚Äôutilisateur a cliqu√© sur "Annuler" (confirmDelete = false) :
  // - On affiche une alerte "Suppression annul√©e".
  // - On arr√™te la fonction avec "return".
  if (!confirmDelete) {
    showAlert("Suppression annul√©e", "warning", true);
    return;
  }

  // Sinon (l‚Äôutilisateur a confirm√©) :
  // On met √† jour la liste des produits en retirant celui qui a l‚ÄôID √† supprimer.
  // ‚Üí "filter" garde seulement les produits dont l'ID est diff√©rent.
  window.appData.products = window.appData.products.filter(p => p.id != id);

  // On sauvegarde les donn√©es modifi√©es dans le stockage local (localStorage).
  saveAppData();

  // On recharge l‚Äôaffichage du tableau de bord avec la liste mise √† jour.
  updateDashboard();

  // On affiche un message visuel d'information confirmant la suppression.
  // Exemple : Produit "Gel coiffant" supprim√©
  showAlert(`Produit "${product.name}" supprim√©`, "info", true);
}
/*************************************************************
 * üóëÔ∏è Fonction deleteProduct
 * ‚Üí Cette fonction permet de supprimer un produit de la liste.
 * ‚Üí Elle demande d‚Äôabord une confirmation √† l‚Äôutilisateur avant
 *   d‚Äôeffacer d√©finitivement le produit choisi.
 *************************************************************/




/*************************************************************
 * üì§ Fonction exportToCSV
 * ‚Üí Cette fonction permet d‚Äôexporter la liste des produits
 *   au format CSV (fichier lisible par Excel).
 *************************************************************/

function exportToCSV() {

  // V√©rifie si la liste des produits est vide.
  // window.appData.products.length === 0 signifie qu'il n‚Äôy a aucun produit.
  // Si c‚Äôest le cas ‚Üí on affiche une alerte et on arr√™te la fonction.
  if (window.appData.products.length === 0) {
    showAlert("Aucun produit √† exporter", "warning", true);
    return;
  }

  // On d√©finit l‚Äôen-t√™te (les titres des colonnes) du fichier CSV.
  // Chaque √©l√©ment du tableau correspond √† une colonne : ID, Nom, etc.
  const headers = ["ID", "Nom", "Quantit√©", "Prix", "Cat√©gorie", "Statut"];

  // On construit les lignes de donn√©es √† partir de chaque produit.
  // map() parcourt chaque produit et cr√©e un tableau de valeurs.
  const rows = window.appData.products.map(p => {
    // On calcule le statut en fonction de la quantit√© :
    // - Si quantit√© < 5 ‚Üí "Stock Bas"
    // - Sinon ‚Üí "En Stock"
    const statut = p.quantity < 5 ? "Stock Bas" : "En Stock";

    // On retourne un tableau avec toutes les infos du produit.
    // Les textes sont entour√©s de guillemets (") pour √©viter les erreurs.
    return [p.id, '"' + p.name + '"', p.quantity, p.price.toFixed(2), '"' + p.category + '"', '"' + statut + '"'];
  });

  // On assemble toutes les lignes pour cr√©er un texte CSV.
  // headers.join(";") ‚Üí cr√©e la ligne des titres s√©par√©s par ";"
  // rows.map(...).join(";") ‚Üí cr√©e toutes les lignes des produits
  // .join("\n") ‚Üí met chaque ligne √† la suite sur une nouvelle ligne.
  const csv = [headers.join(";")].concat(rows.map(r => r.join(";"))).join("\n");

  // On cr√©e un objet sp√©cial appel√© "Blob" contenant le texte du CSV.
  // "\uFEFF" ‚Üí ajout d‚Äôun caract√®re sp√©cial pour bien g√©rer les accents.
  // type: "text/csv;charset=utf-8;" ‚Üí indique que c‚Äôest un fichier CSV en UTF-8.
  const blob = new Blob(["\uFEFF" + csv], {type: "text/csv;charset=utf-8;"});

  // On cr√©e un lien (√©l√©ment <a>) invisible qui va servir √† t√©l√©charger le fichier.
  const link = document.createElement("a");

  // On g√©n√®re un horodatage (date + heure) pour nommer le fichier.
  const now = new Date();
  const ts = now.toLocaleDateString("fr-FR").replace(/\//g, "-") + "_" + now.toLocaleTimeString("fr-FR").replace(/:/g, "-");

  // On associe le contenu du fichier CSV au lien de t√©l√©chargement.
  link.href = URL.createObjectURL(blob);

  // On d√©finit le nom du fichier qui sera t√©l√©charg√© (ex: stock_export_01-02-2025_15-45-30.csv).
  link.download = "stock_export_" + ts + ".csv";

  // On "simule" un clic automatique sur le lien pour lancer le t√©l√©chargement.
  link.click();

  // Enfin, on affiche une alerte pour dire que l‚Äôexport s‚Äôest bien pass√©.
  showAlert("Export CSV r√©ussi", "success", true);
}
/*************************************************************
 * üì§ Fonction exportToCSV
 * ‚Üí Cette fonction permet d‚Äôexporter la liste des produits
 *   au format CSV (fichier lisible par Excel).
 *************************************************************/






/*************************************************************
 * üë• Fonction loadAdminData
 * ‚Üí Cette fonction sert √† afficher la liste des utilisateurs
 *   dans le tableau de la page "Administration".
 *************************************************************/

function loadAdminData() {

  // Affiche dans la console tous les utilisateurs charg√©s depuis appData.
  // Cela permet de v√©rifier que les donn√©es sont bien pr√©sentes.
  console.log("Chargement des utilisateurs:", window.appData.users);

  // S√©lectionne dans la page l‚Äô√©l√©ment <tbody> du tableau qui affiche les utilisateurs.
  // Cet √©l√©ment a l‚ÄôID "usersTable".
  const tbody = document.getElementById("usersTable");
  
  // V√©rifie si la liste des utilisateurs n‚Äôexiste pas OU est vide.
  // (!window.appData.users) ‚Üí signifie qu‚Äôil n‚Äôy a pas de tableau users.
  // (window.appData.users.length === 0) ‚Üí signifie que le tableau existe mais ne contient aucun utilisateur.
  if (!window.appData.users || window.appData.users.length === 0) {
    // Si c‚Äôest le cas ‚Üí on affiche une seule ligne "Aucun utilisateur" dans le tableau.
    // colspan='4' ‚Üí la cellule occupe 4 colonnes pour √™tre bien centr√©e.
    tbody.innerHTML = "<tr><td colspan='4' class='text-center text-muted'>Aucun utilisateur</td></tr>";
    return; // On arr√™te la fonction ici.
  }
  
  // Si des utilisateurs existent ‚Üí on commence √† construire le HTML qui affichera chaque utilisateur.
  let html = "";

  // Boucle for ‚Üí parcourt tous les utilisateurs du tableau "users".
  // i = index (position de l‚Äôutilisateur dans le tableau).
  for (let i = 0; i < window.appData.users.length; i++) {

    // On r√©cup√®re l‚Äôutilisateur actuel (celui de la position i).
    const u = window.appData.users[i];

    // D√©termine le texte du r√¥le en fonction de la valeur de u.role.
    // Si r√¥le = "admin" ‚Üí "Administrateur", sinon ‚Üí "Utilisateur".
    const roleText = u.role === "admin" ? "Administrateur" : "Utilisateur";

    // Choisit la couleur du badge en fonction du r√¥le.
    // "bg-danger" (rouge) pour admin, "bg-primary" (bleu) pour utilisateur.
    const roleBadge = u.role === "admin" ? "bg-danger" : "bg-primary";

    // D√©finit la couleur du badge de statut en fonction de u.status.
    // Si statut = "Actif" ‚Üí badge vert, sinon ‚Üí badge gris.
    const statusBadge = u.status === "Actif" ? "bg-success" : "bg-secondary";

    // Choisit la couleur du bouton "Activer/D√©sactiver".
    // Si Actif ‚Üí bouton jaune (warning), sinon ‚Üí bouton vert (success).
    const toggleBtnClass = u.status === "Actif" ? "btn-warning" : "btn-success";

    // Choisit l‚Äôic√¥ne du bouton.
    // Si Actif ‚Üí ic√¥ne "fa-ban" (interdiction), sinon ‚Üí ic√¥ne "fa-check".
    const toggleIcon = u.status === "Actif" ? "fa-ban" : "fa-check";

    // Choisit le texte du bouton.
    // Si Actif ‚Üí "D√©sactiver", sinon ‚Üí "Activer".
    const toggleText = u.status === "Actif" ? "D√©sactiver" : "Activer";
    
    // Maintenant, on construit la ligne HTML du tableau (<tr>) pour cet utilisateur.

    // Ouvre une nouvelle ligne dans le tableau.
    html += "<tr>";

    // Premi√®re cellule : le nom d‚Äôutilisateur avec une petite ic√¥ne devant.
    html += "<td><i class='fas fa-user me-2'></i>" + u.username + "</td>";

    // Deuxi√®me cellule : le r√¥le (avec un badge color√©).
    html += "<td><span class='badge " + roleBadge + "'>" + roleText + "</span></td>";

    // Troisi√®me cellule : le statut (Actif/Inactif avec un badge).
    html += "<td><span class='badge " + statusBadge + "'>" + u.status + "</span></td>";

    // Quatri√®me cellule : les actions possibles (activer/d√©sactiver + supprimer).
    html += "<td>";

    // Bouton Activer/D√©sactiver avec son ic√¥ne et son texte.
    // onclick appelle la fonction toggleUserStatus(i) avec l‚Äôindex de l‚Äôutilisateur.
    html += "<button class='btn btn-sm " + toggleBtnClass + " me-1' onclick='toggleUserStatus(" + i + ")'>";
    html += "<i class='fas " + toggleIcon + "'></i> " + toggleText;
    html += "</button>";

    // Bouton Supprimer avec ic√¥ne de poubelle.
    // onclick appelle la fonction deleteUser(i).
    html += "<button class='btn btn-sm btn-danger' onclick='deleteUser(" + i + ")'>";
    html += "<i class='fas fa-trash'></i> Supprimer";
    html += "</button>";

    // Ferme la cellule des actions.
    html += "</td>";

    // Ferme la ligne du tableau.
    html += "</tr>";
  }
  
  // Enfin, on injecte tout le HTML construit dans le tableau des utilisateurs.
  tbody.innerHTML = html;
}
/*************************************************************
 * üë• Fonction loadAdminData
 * ‚Üí Cette fonction sert √† afficher la liste des utilisateurs
 *   dans le tableau de la page "Administration".
 *************************************************************/






/*************************************************************
 * üîÑ Fonction toggleUserStatus
 * ‚Üí Cette fonction permet de changer le statut d‚Äôun utilisateur
 *   (passer de "Actif" √† "Inactif" ou inversement).
 * 
 * Param√®tre :
 *   - i : c‚Äôest la position (index) de l‚Äôutilisateur dans
 *         le tableau window.appData.users.
 *************************************************************/

function toggleUserStatus(i) {

  // On r√©cup√®re l‚Äôutilisateur qui se trouve √† la position "i"
  // dans le tableau des utilisateurs (window.appData.users).
  const user = window.appData.users[i];

  // V√©rifie si l‚Äôutilisateur s√©lectionn√© est l‚Äôutilisateur actuellement connect√©.
  // ‚Üí On ne veut pas qu‚Äôun utilisateur puisse d√©sactiver son propre compte.
  if (user.username === window.appData.currentUser.username) {
    // Si c‚Äôest le cas, on affiche un message d‚Äôalerte (warning).
    // "Vous ne pouvez pas modifier votre propre statut"
    showAlert("Vous ne pouvez pas modifier votre propre statut", "warning", true);

    // Et on arr√™te imm√©diatement la fonction (return).
    return;
  }
  
  // Si l‚Äôutilisateur n‚Äôest PAS celui actuellement connect√© :
  // On change son statut :
  // - Si son statut est "Actif", il devient "Inactif".
  // - Si son statut est "Inactif", il devient "Actif".
  window.appData.users[i].status = window.appData.users[i].status === "Actif" ? "Inactif" : "Actif";

  // On sauvegarde les donn√©es mises √† jour dans le stockage local (localStorage).
  saveAppData();

  // On recharge la liste des utilisateurs pour refl√©ter le changement dans le tableau.
  loadAdminData();

  // Enfin, on affiche un message de succ√®s √† l‚Äô√©cran pour confirmer le changement.
  showAlert("Statut de l'utilisateur mis √† jour", "success", true);
}
/*************************************************************
 * üîÑ Fonction toggleUserStatus
 * ‚Üí Cette fonction permet de changer le statut d‚Äôun utilisateur
 *   (passer de "Actif" √† "Inactif" ou inversement).
 * 
 * Param√®tre :
 *   - i : c‚Äôest la position (index) de l‚Äôutilisateur dans
 *         le tableau window.appData.users.
 *************************************************************/





/*************************************************************
 * ‚ùå Fonction deleteUser
 * ‚Üí Cette fonction permet de supprimer un utilisateur du syst√®me.
 * 
 * Param√®tre :
 *   - i : c‚Äôest la position (index) de l‚Äôutilisateur dans
 *         le tableau window.appData.users.
 *************************************************************/

function deleteUser(i) {

  // On r√©cup√®re l‚Äôutilisateur qui se trouve √† la position "i"
  // dans le tableau window.appData.users.
  const user = window.appData.users[i];

  // V√©rifie si l‚Äôutilisateur que l‚Äôon veut supprimer
  // est le m√™me que l‚Äôutilisateur actuellement connect√©.
  // ‚Üí On ne veut pas qu‚Äôun utilisateur puisse supprimer son propre compte.
  if (user.username === window.appData.currentUser.username) {
    // Si c‚Äôest le cas, on affiche un message d‚Äôalerte (danger).
    // "Vous ne pouvez pas supprimer votre propre compte"
    showAlert("Vous ne pouvez pas supprimer votre propre compte", "danger", true);

    // Et on arr√™te imm√©diatement la fonction (return).
    return;
  }
  
  // Si l‚Äôutilisateur n‚Äôest pas celui actuellement connect√© :
  // On affiche une bo√Æte de confirmation avec un message.
  // L‚Äôutilisateur doit cliquer sur "OK" ou "Annuler".
  if (confirm("√ätes-vous s√ªr de vouloir supprimer l'utilisateur \"" + user.username + "\" ?")) {

    // Si l‚Äôadministrateur a cliqu√© sur "OK" :
    // On supprime l‚Äôutilisateur du tableau des utilisateurs.
    // La m√©thode .splice(i, 1) enl√®ve 1 √©l√©ment √† la position i.
    window.appData.users.splice(i, 1);

    // On sauvegarde les nouvelles donn√©es mises √† jour (sans cet utilisateur).
    saveAppData();

    // On recharge la liste des utilisateurs pour afficher les changements.
    loadAdminData();

    // On affiche un message d‚Äôinformation confirmant la suppression.
    showAlert("Utilisateur supprim√©", "info", true);
  }
}
/*************************************************************
 * ‚ùå Fonction deleteUser
 * ‚Üí Cette fonction permet de supprimer un utilisateur du syst√®me.
 * 
 * Param√®tre :
 *   - i : c‚Äôest la position (index) de l‚Äôutilisateur dans
 *         le tableau window.appData.users.
 *************************************************************/




/*************************************************************
 * üë§ Fonction saveUser
 * ‚Üí Cette fonction permet d‚Äôajouter un nouvel utilisateur
 *   dans la liste des utilisateurs du syst√®me.
 *************************************************************/

function saveUser() {

  // On r√©cup√®re la valeur entr√©e dans le champ texte "newUsername".
  // La m√©thode .trim() enl√®ve les espaces avant et apr√®s le texte.
  const u = document.getElementById("newUsername").value.trim();

  // On r√©cup√®re la valeur entr√©e dans le champ "newPassword".
  const p = document.getElementById("newPassword").value;

  // On r√©cup√®re la valeur s√©lectionn√©e dans la liste d√©roulante "newRole".
  // Exemple : "admin" ou "user".
  const r = document.getElementById("newRole").value;
  
  // V√©rification : si l‚Äôun des champs (nom ou mot de passe) est vide...
  if (!u || !p) {
    // On affiche un message d‚Äôerreur (alerte danger).
    showAlert("Tous les champs sont obligatoires", "danger", true);

    // Et on arr√™te imm√©diatement la fonction.
    return;
  }
  
  // V√©rification : on regarde si le nom d‚Äôutilisateur existe d√©j√†.
  // La m√©thode .find() cherche un utilisateur qui a le m√™me username.
  if (window.appData.users.find(x => x.username === u)) {
    // Si le nom existe d√©j√†, on affiche un message d‚Äôavertissement.
    showAlert("Ce nom d'utilisateur existe d√©j√†", "warning", true);

    // Et on arr√™te la fonction (l‚Äôutilisateur n‚Äôest pas ajout√©).
    return;
  }
  
  // Si toutes les conditions sont respect√©es :
  // On ajoute un nouvel utilisateur dans le tableau des utilisateurs.
  // Avec son nom, mot de passe, r√¥le, et son statut "Actif".
  window.appData.users.push({username: u, password: p, role: r, status: "Actif"});

  // On sauvegarde les nouvelles donn√©es mises √† jour.
  saveAppData();

  // On recharge la liste des utilisateurs pour afficher ce nouveau compte.
  loadAdminData();

  // On ferme la fen√™tre modale (popup) du formulaire d‚Äôajout.
  userModal.hide();

  // On r√©initialise le formulaire pour le vider (nom, mot de passe, r√¥le).
  document.getElementById("userForm").reset();

  // Enfin, on affiche un message de succ√®s confirmant la cr√©ation.
  showAlert("Utilisateur cr√©√© avec succ√®s", "success", true);
}
/*************************************************************
 * üë§ Fonction saveUser
 * ‚Üí Cette fonction permet d‚Äôajouter un nouvel utilisateur
 *   dans la liste des utilisateurs du syst√®me.
 *************************************************************/





/*************************************************************
 * üíæ Fonction exportJSON
 * ‚Üí Cette fonction sert √† exporter toutes les donn√©es
 *   (produits + utilisateurs) dans un fichier JSON t√©l√©chargeable.
 *   Elle ajoute aussi des informations sur l‚Äô√©tat du stock.
 *************************************************************/

function exportJSON() {

  // On cr√©e un nouvel objet enrichi bas√© sur window.appData
  // ‚Üí On garde toutes les donn√©es existantes avec "...window.appData"
  // ‚Üí Mais on modifie la partie "products" pour y ajouter l‚Äô√©tat du stock.
  const enrichedData = {
    ...window.appData,

    // On parcourt tous les produits avec .map() pour cr√©er une nouvelle liste
    products: window.appData.products.map(p => {

      // D√©claration d‚Äôune variable qui contiendra l‚Äô√©tat du stock
      let etatStock;

      // Si la quantit√© est exactement 0 ‚Üí le produit est en rupture
      if (p.quantity === 0) {
        etatStock = "Rupture";

      // Si la quantit√© est comprise entre 1 et 5 ‚Üí stock critique
      } else if (p.quantity <= 5) {
        etatStock = "Critique";

      // Si la quantit√© est entre 6 et 15 ‚Üí stock faible
      } else if (p.quantity <= 15) {
        etatStock = "Faible";

      // Si la quantit√© est entre 16 et 50 ‚Üí stock normal
      } else if (p.quantity <= 50) {
        etatStock = "Normal";

      // Si la quantit√© est sup√©rieure √† 50 ‚Üí excellent stock
      } else {
        etatStock = "Excellent";
      }
      
      // On retourne un nouvel objet produit qui contient :
      // - toutes les infos du produit d‚Äôorigine (...p)
      // - un champ "etatStock" avec le texte calcul√© ci-dessus
      // - un champ "statut" pour dire "Stock Bas" ou "En Stock"
      return {
        ...p,
        etatStock: etatStock,
        statut: p.quantity <= 5 ? "Stock Bas" : "En Stock"
      };
    })
  };
  
  // On convertit l‚Äôobjet enrichi en texte JSON bien format√© (indent√© avec 2 espaces).
  const dataStr = JSON.stringify(enrichedData, null, 2);

  // On cr√©e un objet "Blob" qui contient ce texte JSON.
  // Un Blob est une "bo√Æte" de donn√©es qu‚Äôon peut t√©l√©charger comme un fichier.
  const blob = new Blob([dataStr], {type: "application/json;charset=utf-8;"});

  // On cr√©e un lien HTML invisible qui servira √† d√©clencher le t√©l√©chargement.
  const link = document.createElement("a");

  // On r√©cup√®re la date et l‚Äôheure actuelle.
  const now = new Date();

  // On g√©n√®re un "timestamp" (horodatage) au format fran√ßais :
  // Exemple ‚Üí 02-10-2025_14-35-22
  const ts = now.toLocaleDateString("fr-FR").replace(/\//g, "-") + "_" + 
             now.toLocaleTimeString("fr-FR").replace(/:/g, "-");

  // On donne au lien une URL temporaire qui pointe vers le fichier Blob.
  link.href = URL.createObjectURL(blob);

  // On d√©finit le nom du fichier t√©l√©charg√© avec la date et l‚Äôheure incluses.
  link.download = "sauvegarde_stock_" + ts + ".json";

  // On "simule" un clic sur le lien ‚Üí cela lance directement le t√©l√©chargement.
  link.click();

  // On affiche une alerte de succ√®s pour confirmer que l‚Äôexport a bien march√©.
  showAlert("Export JSON r√©ussi !", "success", true);
}
/*************************************************************
 * üíæ Fonction exportJSON
 * ‚Üí Cette fonction sert √† exporter toutes les donn√©es
 *   (produits + utilisateurs) dans un fichier JSON t√©l√©chargeable.
 *   Elle ajoute aussi des informations sur l‚Äô√©tat du stock.
 *************************************************************/






/*************************************************************
 * üì• Fonction importJSON
 * ‚Üí Cette fonction permet d‚Äôimporter un fichier JSON sauvegard√©
 *   pr√©c√©demment afin de recharger toutes les donn√©es (produits,
 *   utilisateurs, etc.) dans l‚Äôapplication.
 *************************************************************/

function importJSON(event) {

  // On r√©cup√®re le fichier s√©lectionn√© par l‚Äôutilisateur.
  // "event.target.files[0]" signifie : le premier fichier choisi.
  const file = event.target.files[0];

  // Si aucun fichier n‚Äôa √©t√© choisi, on arr√™te la fonction imm√©diatement.
  if (!file) return;
  
  // On cr√©e un nouvel objet FileReader.
  // FileReader est un outil int√©gr√© dans le navigateur pour lire le contenu d‚Äôun fichier.
  const reader = new FileReader();

  // Quand le fichier sera compl√®tement lu, cette fonction "onload" sera ex√©cut√©e.
  reader.onload = function(e) {
    try {
      // On essaye de convertir le contenu du fichier texte en objet JavaScript.
      // JSON.parse() prend une cha√Æne JSON et la transforme en un vrai objet.
      const importedData = JSON.parse(e.target.result);

      // On v√©rifie que les donn√©es import√©es contiennent bien deux choses :
      // - une liste de produits
      // - une liste d‚Äôutilisateurs
      if (importedData.products && importedData.users) {
        
        // Si c‚Äôest correct, on remplace compl√®tement nos donn√©es actuelles
        // (window.appData) par celles import√©es.
        window.appData = importedData;

        // On sauvegarde ces nouvelles donn√©es dans le localStorage.
        saveAppData();

        // On met √† jour le tableau de bord avec les nouvelles donn√©es produits.
        updateDashboard();

        // Si un utilisateur est d√©j√† connect√© et qu‚Äôil est administrateur,
        // on recharge aussi la partie administration (liste des utilisateurs).
        if (window.appData.currentUser && window.appData.currentUser.role === "admin") {
          loadAdminData();
        }

        // On informe l‚Äôutilisateur que l‚Äôimportation s‚Äôest bien d√©roul√©e.
        showAlert("Import JSON r√©ussi !", "success", true);

      } else {
        // Si les donn√©es import√©es ne contiennent pas "products" ou "users",
        // on avertit l‚Äôutilisateur que le fichier est invalide.
        showAlert("Fichier JSON invalide", "danger", true);
      }
    } catch (err) {
      // Si une erreur survient (par exemple : JSON mal form√©),
      // on affiche une alerte pour pr√©venir l‚Äôutilisateur.
      showAlert("Erreur lors de la lecture du fichier", "danger", true);
    }
  };

  // On demande au FileReader de lire le fichier comme du texte (encod√© en UTF-8).
  // D√®s que la lecture sera finie, le code dans "reader.onload" sera ex√©cut√©.
  reader.readAsText(file, "UTF-8");
}
/*************************************************************
 * üì• Fonction importJSON
 * ‚Üí Cette fonction permet d‚Äôimporter un fichier JSON sauvegard√©
 *   pr√©c√©demment afin de recharger toutes les donn√©es (produits,
 *   utilisateurs, etc.) dans l‚Äôapplication.
 *************************************************************/





/*************************************************************
 * ‚¨ÜÔ∏è Fonctionnalit√© "Retour en haut de page"
 * ‚Üí Ce code permet d‚Äôafficher un bouton qui appara√Æt uniquement
 *   quand on descend dans la page. En cliquant dessus, on remonte
 *   automatiquement tout en haut avec un effet de d√©filement fluide.
 *************************************************************/

// On r√©cup√®re l‚Äô√©l√©ment du bouton "retour en haut" en ciblant son identifiant.
const scrollTopBtn = document.getElementById("scrollTopBtn");

// On ajoute un "√©couteur d‚Äô√©v√©nement" sur la fen√™tre (window).
// Ici on attend un √©v√©nement de type "scroll", c‚Äôest-√†-dire quand
// l‚Äôutilisateur fait d√©filer la page vers le bas ou vers le haut.
window.addEventListener("scroll", function() {

  // On v√©rifie deux conditions :
  // 1. Est-ce que la page a √©t√© d√©fil√©e de plus de 200 pixels (window.scrollY > 200) ?
  // 2. Est-ce que la partie "dashboardPage" est visible (donc pas cach√©e) ?
  if (window.scrollY > 200 && !document.getElementById("dashboardPage").classList.contains("hidden")) {
    
    // Si ces deux conditions sont vraies :
    // On ajoute la classe CSS "show" au bouton.
    // Cette classe rend le bouton visible gr√¢ce aux styles d√©finis dans le CSS.
    scrollTopBtn.classList.add("show");

  } else {
    // Sinon (si la page est en haut OU si la page Dashboard est masqu√©e) :
    // On retire la classe "show" ‚Üí le bouton redevient invisible.
    scrollTopBtn.classList.remove("show");
  }
});

// On ajoute un autre "√©couteur d‚Äô√©v√©nement" sur le bouton lui-m√™me.
// Ici on attend que l‚Äôutilisateur clique sur le bouton.
scrollTopBtn.addEventListener("click", function() {

  // Quand le bouton est cliqu√© ‚Üí la page remonte automatiquement tout en haut.
  // window.scrollTo permet de d√©placer la vue de la page.
  // {top: 0} ‚Üí aller tout en haut.
  // behavior: "smooth" ‚Üí le d√©filement sera fluide et non instantan√©.
  window.scrollTo({top: 0, behavior: "smooth"});
});
/*************************************************************
 * ‚¨ÜÔ∏è Fonctionnalit√© "Retour en haut de page"
 * ‚Üí Ce code permet d‚Äôafficher un bouton qui appara√Æt uniquement
 *   quand on descend dans la page. En cliquant dessus, on remonte
 *   automatiquement tout en haut avec un effet de d√©filement fluide.
 *************************************************************/




/*************************************************************
 * üîî Fonction "showAlert"
 * ‚Üí Cette fonction affiche une alerte temporaire en haut de la page
 *   avec un message, une couleur (succ√®s, erreur, etc.), et √©ventuellement un son.
 * 
 * Param√®tres :
 *   msg  ‚Üí le texte du message √† afficher.
 *   type ‚Üí le type d‚Äôalerte (success, danger, warning, info‚Ä¶).
 *   play ‚Üí si true, joue un son quand l‚Äôalerte appara√Æt.
 *************************************************************/

function showAlert(msg, type, play) {

  // On cr√©e dynamiquement un nouvel √©l√©ment <div> dans le document.
  const d = document.createElement("div");

  // On applique des classes CSS √† cette <div> pour lui donner un style.
  // - "alert alert-[type]" : classes Bootstrap pour colorer l‚Äôalerte selon le type (ex: "alert-success").
  // - "alert-dismissible" : rend l‚Äôalerte fermable par l‚Äôutilisateur.
  // - "fade show" : animations Bootstrap pour appara√Ætre progressivement.
  // - "alert-custom" : classe personnalis√©e (d√©finie dans le CSS du projet).
  d.className = "alert alert-" + type + " alert-dismissible fade show alert-custom";

  // On choisit quelle ic√¥ne afficher selon le type d‚Äôalerte :
  // - success ‚Üí ‚úÖ check-circle
  // - danger  ‚Üí ‚ùå times-circle
  // - autre   ‚Üí ‚ö†Ô∏è exclamation-triangle
  const icon = type === "success" ? "check-circle" : (type === "danger" ? "times-circle" : "exclamation-triangle");

  // On d√©finit le contenu HTML de l‚Äôalerte.
  // - Une <div> qui contient :
  //   1. Une ic√¥ne (FontAwesome) correspondant au type.
  //   2. Le message (msg) pass√© en param√®tre.
  //   3. Un bouton pour fermer l‚Äôalerte ("btn-close").
  d.innerHTML = "<div class='d-flex align-items-center'>" +
                  "<i class='fas fa-" + icon + " me-2'></i>" + msg +
                  "<button class='btn-close' data-bs-dismiss='alert'></button>" +
                "</div>";

  // On ajoute l‚Äôalerte nouvellement cr√©√©e dans le conteneur pr√©vu (#alertContainer).
  document.getElementById("alertContainer").appendChild(d);

  // üéµ Si le param√®tre "play" est vrai (true) ‚Üí on joue un son d‚Äôalerte.
  if (play) {
    try {
      // On r√©cup√®re l‚Äô√©l√©ment audio avec l‚ÄôID "alertSound".
      const a = document.getElementById("alertSound");

      // On remet la lecture du son au d√©but (important si le son est d√©j√† en cours).
      a.currentTime = 0;

      // On lance la lecture du son.
      a.play();
    } catch (e) {
      // Si une erreur se produit (exemple : navigateur qui bloque le son),
      // on l‚Äôignore et le programme continue sans planter.
    }
  }

  // ‚è≥ On d√©finit un d√©lai automatique : apr√®s 4000 millisecondes (4 secondes),
  // l‚Äôalerte sera supprim√©e de la page pour ne pas encombrer l‚Äô√©cran.
  setTimeout(function() {
    d.remove();
  }, 4000);
}
/*************************************************************
 * üîî Fonction "showAlert"
 * ‚Üí Cette fonction affiche une alerte temporaire en haut de la page
 *   avec un message, une couleur (succ√®s, erreur, etc.), et √©ventuellement un son.
 * 
 * Param√®tres :
 *   msg  ‚Üí le texte du message √† afficher.
 *   type ‚Üí le type d‚Äôalerte (success, danger, warning, info‚Ä¶).
 *   play ‚Üí si true, joue un son quand l‚Äôalerte appara√Æt.
 *************************************************************/